{"version":3,"sources":["components/table/table-body/info.js","components/table/table-body/index.js","components/table/table-body/table-body.js","components/search-string/index.js","components/search-string/search-string.js","components/toggle-btn/index.js","components/toggle-btn/toggle.js","components/enum-select/enum-select.js","components/enum-select/index.js","App.js","serviceWorker.js","index.js"],"names":["faker","require","people","i","ran","Math","floor","random","activity","colorOfSkin","boolean","person","id","name","findName","job","jobType","number","currency","finance","currencySymbol","country","address","city","push","createValues","TableBody","props","className","onClick","onSort","bind","sortField","sort","data","map","key","SearchString","onChange","onDataSearch","type","ToggleButton","showActive","for","options","value","label","EnumSelect","isMulti","selectValue","App","cloneData","state","concat","sortType","orderedData","_","orderBy","setState","e","target","filter","item","toLowerCase","includes","checked","checkedval","event","ell","closest","style","background","setTimeout","window","confirm","parentElement","removeChild","console","log","undefined","length","pp","this","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.834bc877.chunk.js","sourcesContent":["import React, { Fragment } from \"react\";\n\nconst faker = require('faker');\nconst people = [];\n\n\nfunction createValues() {\n    for (let i = 1; i < 1001; i++) {\n        const ran = Math.floor(Math.random() * (3 - 1 + 1)) + 1;\n\n        let activity;\n        let colorOfSkin;\n\n        if (faker.random.boolean()) {\n            activity = 'active';\n        } else {\n            activity = 'passive';\n        }\n\n        if (ran === 1) {\n            colorOfSkin = 'white';\n        } else if (ran === 2) {\n            colorOfSkin = 'black'\n        } else {\n            colorOfSkin = 'yellow'\n        }\n\n        const person = {\n            id: i,\n            name: faker.name.findName(),\n            activity: activity,\n            job: faker.name.jobType(),\n            number: faker.random.number(),\n            currency: faker.finance.currencySymbol(),\n            country: faker.address.country(),\n            city: faker.address.city(),\n            colorOfSkin: colorOfSkin,\n        }\n        \n        people.push(person);\n    }\n}\n\ncreateValues();\n\nexport { people };","import TableBody from './table-body';\n\nexport default TableBody;","import React, { Fragment } from \"react\";\n\nimport \"./table-body.css\";\n\nconst TableBody = (props) => {\n\n    return (\n    <div>\n        <table>\n        <thead>\n            <tr className='head'>\n              <th className='head-order'>№</th>\n              <th onClick={props.onSort.bind(null, 'name')} className='head-name'>Name\n              {props.sortField === 'name' ? <small>{props.sort}</small> : <small>  ↑↓ </small>}</th>\n              <th className='hun'>Activity</th>\n              <th className='head-job'>Job Type</th>\n              <th onClick={props.onSort.bind(null, 'number')} className='hun'>Score\n              {props.sortField === 'number' ? <small>{props.sort}</small> : <small>  ↑↓ </small>}</th>\n              <th className='head-country'>Country</th>\n              <th className='head-city'>City</th>\n              <th className='head-symbol'>Currency Symbol</th>\n              <th className='head-color'>Color of the skin</th>\n            </tr>\n          </thead>\n            <tbody onClick={props.onClick}>\n                    {\n                        props.data.map(person => (\n                            <tr key={person.id}>\n                                <td className='order'>{person.id}</td>\n                                <td className='name'>{person.name}</td>\n                                <td className='activity'>{person.activity}</td>\n                                <td className='job'>{person.job}</td>\n                                <td className='num'>{person.number}</td>\n                                <td className='country'>{person.country}</td>\n                                <td className='city'>{person.city}</td>\n                                <td className='symbol'>{person.currency}</td>\n                                <td className='color'>{person.colorOfSkin}</td>\n                            </tr>\n                        ))\n                    }\n            </tbody>\n        </table>\n    </div>\n    )\n}\n\nexport default TableBody;","import SearchString from './search-string';\n\nexport default SearchString;","import React from \"react\";\n\nimport \"./search-string.css\";\nimport { checkPropTypes } from 'prop-types';\n\nconst SearchString = (props) => {\n     return (\n         <div className='input-container' onChange={props.onDataSearch}>\n             <input type=\"search\" />\n         </div>\n     )\n}\n\nexport default SearchString;","import ToggleButton from './toggle';\n\nexport default ToggleButton;","import React from \"react\";\n\nimport \"./toggle.css\";\n\nconst ToggleButton = (props) => {\n    return (\n        <div className=\"toggle\">\n            <p>Show only active</p>\n            <input type=\"checkbox\" id=\"buttonThree\" onChange={props.showActive}/>\n            <label for=\"buttonThree\"> \n                <i></i>\n            </label>\n        </div>\n    )\n}\n\nexport default ToggleButton;","import React, { Component, Fragment } from 'react';\nimport Select from 'react-select';\nimport \"./enum-select.css\";\n\nconst options = [\n  { value: 'white', label: 'White color' },\n  { value: 'black', label: 'Black color' },\n  { value: 'yellow', label: 'Yellow color' }\n]\n\nconst EnumSelect = (props) => {\n    return (\n    <Fragment>\n        <div>\n            <p>Choose color</p>\n        </div>\n        <Select isMulti options={options} onChange={props.selectValue}/>\n    </Fragment>\n    )\n}\n\nexport default EnumSelect;","import EnumSelect from './enum-select';\n\nexport default EnumSelect;","import React, { Fragment, Component } from 'react';\nimport './App.css';\nimport _ from 'lodash';\nimport { people } from './components/table/table-body/info';\n\nimport Table from './components/table/table-body';\nimport SearchString from './components/search-string';\nimport ToggleButton from './components/toggle-btn';\nimport EnumSelect from './components/enum-select';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.onSort = this.onSort.bind(this);\n    this.onDataSearch = this.onDataSearch.bind(this);\n    this.showActive = this.showActive.bind(this);\n    this.selectValue = this.selectValue.bind(this);\n    this.onClick = this.onClick.bind(this);\n    this.state = {\n      sort: 'asc', \n      sortField: 'id', \n      data: people,\n      checked: 0,\n    }\n  }\n\n  onSort = sortField => {\n    const cloneData = this.state.data.concat();\n    const sortType = this.state.sort === 'asc' ? 'desc' : 'asc';\n    const orderedData = _.orderBy(cloneData, sortField, sortType);\n\n    this.setState({\n      data: orderedData,\n      sort: sortType,\n      sortField: sortField\n    })\n  }\n\n  onDataSearch = e => {\n    const value = e.target.value;\n    const cloneData = this.state.data.concat();\n    const orderedData = cloneData.filter(item => {\n      return item['name'].toLowerCase().includes(value.toLowerCase())\n      || item['country'].toLowerCase().includes(value.toLowerCase())\n    })\n    \n    this.setState({\n      data: orderedData,\n    })\n  }\n\n  showActive = () => {\n    const cloneData = this.state.data.concat(); \n    let orderedData;\n\n    if (this.state.checked === 0) {\n      orderedData = cloneData.filter(item => {\n      return item['activity'].toLowerCase().includes('active')\n      })\n    } else if (this.state.checked === 1) {\n      orderedData = people;\n    }\n\n    const checkedval = this.state.checked === 0 ? 1 : 0;\n\n    this.setState({\n      checked: checkedval,\n      data: orderedData,\n    })\n  }\n\n  onClick = (event) => {\n    const checkboxElement = event.target;\n    const ell = checkboxElement.closest(\"tr\");\n    ell.style.background = '#563d7cab';\n    function ss() {\n      const result = window.confirm('Удалить выбранный элемент?');\n      if (result) {\n        ell.parentElement.removeChild(ell);\n      } else {\n        ell.style.background = 'white';\n      }\n    }\n\n    setTimeout(ss, 300);\n  }\n\n  selectValue = (options) => {\n    let orderedData;\nconsole.log(options);\n    if (options === null || options[0] === undefined) {\n      orderedData = people;\n    } else if (options[0].value === 'white' && options.length === 1) {\n      orderedData = people.filter(item => {\n        return item['colorOfSkin'].toLowerCase().includes('white')\n        })\n    } else if (options[0].value === 'black' && options.length === 1) {\n      orderedData = people.filter(item => {\n        return item['colorOfSkin'].toLowerCase().includes('black')\n        })\n    } else if (options[0].value === 'yellow' && options.length === 1) {\n      orderedData = people.filter(item => {\n        return item['colorOfSkin'].toLowerCase().includes('yellow')\n        })\n    } else if (options[0].value === 'white' && options[1].value === 'black' && options.length === 2) {\n      orderedData = people.filter(item => {\n        return item['colorOfSkin'].toLowerCase().includes('white') \n        })\n        const pp = people.filter(item => {\n          return item['colorOfSkin'].toLowerCase().includes('black') \n          });\n          orderedData = orderedData.concat(pp);\n    } else if (options[0].value === 'white' && options[1].value === 'yellow' && options.length === 2) {\n      orderedData = people.filter(item => {\n        return item['colorOfSkin'].toLowerCase().includes('white') \n        })\n        const pp = people.filter(item => {\n          return item['colorOfSkin'].toLowerCase().includes('yellow') \n          });\n          orderedData = orderedData.concat(pp);\n    } else if (options[0].value === 'black' && options[1].value === 'yellow' && options.length === 2) {\n      orderedData = people.filter(item => {\n        return item['colorOfSkin'].toLowerCase().includes('black') \n        })\n        const pp = people.filter(item => {\n          return item['colorOfSkin'].toLowerCase().includes('yellow') \n          });\n          orderedData = orderedData.concat(pp);\n    } else if (options[0].value === 'black' && options[1].value === 'white' && options.length === 2) {\n      orderedData = people.filter(item => {\n        return item['colorOfSkin'].toLowerCase().includes('black') \n        })\n        const pp = people.filter(item => {\n          return item['colorOfSkin'].toLowerCase().includes('white') \n          });\n          orderedData = orderedData.concat(pp);\n    } else if (options[0].value === 'yellow' && options[1].value === 'black' && options.length === 2) {\n      orderedData = people.filter(item => {\n        return item['colorOfSkin'].toLowerCase().includes('yellow') \n        })\n        const pp = people.filter(item => {\n          return item['colorOfSkin'].toLowerCase().includes('black') \n          });\n          orderedData = orderedData.concat(pp);\n    } else if (options[0].value === 'yellow' && options[1].value === 'white' && options.length === 2) {\n      orderedData = people.filter(item => {\n        return item['colorOfSkin'].toLowerCase().includes('yellow') \n        })\n        const pp = people.filter(item => {\n          return item['colorOfSkin'].toLowerCase().includes('white') \n          });\n          orderedData = orderedData.concat(pp);\n    } else if (options.length === 3) {\n      orderedData = people;\n    } \n\n    this.setState({\n      data: orderedData,\n    })\n  }\n\n  render() {\n  return (\n   <Fragment>\n     <ToggleButton showActive={this.showActive}/>\n     <SearchString \n      onDataSearch={this.onDataSearch}/>\n       <EnumSelect selectValue={this.selectValue}/>\n     <Table \n     onSort={this.onSort} \n     data={this.state.data}\n     sort={this.state.sort}\n     sortField={this.state.sortField}\n     onClick={this.onClick}/>\n   </Fragment>\n  );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}